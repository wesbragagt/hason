# Optimized multi-stage Docker build
# Stage 1: Nix environment for WASM building
FROM nixos/nix:latest AS nix-builder

# Enable flakes (git is already installed in nixos/nix image)
RUN echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf

WORKDIR /build

# Copy only files needed for Nix build
COPY flake.nix flake.lock ./
COPY packages/app/public/jq-version.json ./packages/app/public/jq-version.json
COPY packages/jq-hason/src/wasm/ ./packages/jq-hason/src/wasm/

# Build WASM files
RUN nix run .#copy-wasm-to-app

# Stage 2: Node.js environment for SPA building  
FROM node:20-alpine AS node-builder

# Install build tools and pnpm
RUN apk add --no-cache python3 make g++ && \
    npm install -g pnpm@latest

WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/app/package.json ./packages/app/
COPY packages/jq-hason/package.json ./packages/jq-hason/

# Install dependencies and allow build scripts for native modules
RUN pnpm install --frozen-lockfile && \
    pnpm approve-builds sharp @tailwindcss/oxide esbuild && \
    pnpm rebuild

# Copy source code
COPY packages/ ./packages/
COPY tsconfig.json ./

# Copy WASM files from Nix builder
COPY --from=nix-builder /build/packages/app/public/jq*.js ./packages/app/public/
COPY --from=nix-builder /build/packages/app/public/jq*.wasm ./packages/app/public/

# Build jq-hason package first
RUN pnpm --filter=jq-hason run build

# Build the application
RUN pnpm --filter=app run build

# Verify build output
RUN ls -la packages/app/dist/ && \
    echo "WASM files in dist:" && \
    find packages/app/dist/ -name "jq*" -type f || true

# Stage 3: Production - lightweight nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy nginx configuration for SPA
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/wasm;
    
    # SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Static asset caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # WASM files with correct MIME type and caching
    location ~* \.wasm$ {
        add_header Content-Type "application/wasm";
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Prevent access to sensitive files
    location ~ /\. {
        deny all;
    }
}
EOF

# Copy built application
COPY --from=node-builder /app/packages/app/dist /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || curl -f http://localhost/ || exit 1

# Container metadata
LABEL org.opencontainers.image.title="Hason - JSON Formatter" \
      org.opencontainers.image.description="WebAssembly-powered JSON formatter with jq support" \
      org.opencontainers.image.source="https://github.com/wesbragagt/hason" \
      org.opencontainers.image.documentation="https://github.com/wesbragagt/hason/blob/main/README.md"

EXPOSE 80

# Use exec form for better signal handling
CMD ["nginx", "-g", "daemon off;"]