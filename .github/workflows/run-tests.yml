name: "Run Tests"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup npm and install dependencies
        uses: ./.github/actions/setup-install

      - name: Cache dependencies
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

  build-wasm:
    name: Build WASM Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache WASM files
        id: cache-wasm
        uses: actions/cache@v4
        with:
          path: |
            public/jq*.js
            public/jq*.wasm
            src/lib/jq-wasm/wasm/jq*.js
            src/lib/jq-wasm/wasm/jq*.wasm
          key: jq-wasm-${{ hashFiles('flake.nix', 'flake.lock', 'public/jq-version.json') }}

      - name: Install Nix
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        uses: DeterminateSystems/nix-installer-action@main

      - name: Cache Nix store
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      - name: Build WASM files
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          nix build .#jq-wasm
          mkdir -p public src/lib/jq-wasm/wasm
          cp -v result/lib/jq*.js public/
          cp -v result/lib/jq*.wasm public/
          cp -v result/lib/jq*.js src/lib/jq-wasm/wasm/
          cp -v result/lib/jq*.wasm src/lib/jq-wasm/wasm/

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jq-wasm-files
          path: |
            public/jq*.js
            public/jq*.wasm
            src/lib/jq-wasm/wasm/jq*.js
            src/lib/jq-wasm/wasm/jq*.wasm
            public/jq-version.json

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Run linter
        run: npm run lint

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build-wasm]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Download WASM artifacts
        uses: actions/download-artifact@v5
        with:
          name: jq-wasm-files
          path: ./
      
      - name: Run unit and integration tests
        run: npm run test:unit && npm run test:integration

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build-wasm]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Download WASM artifacts
        uses: actions/download-artifact@v5
        with:
          name: jq-wasm-files
          path: ./

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build and run E2E tests
        run: |
          npm run build
          npm run preview &
          PREVIEW_PID=$!
          timeout 30 bash -c 'until curl -s http://localhost:4173 > /dev/null; do sleep 1; done'
          TEST_URL=http://localhost:4173 npm run test:e2e
          kill $PREVIEW_PID

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
